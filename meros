#!/usr/bin/python3

import argparse
import logging
import traceback
import sys
from pathlib import Path

from src.app_config import AppConfig
from src.vm_models import VMConfigLoader
from src.kernel_builder import KernelBuilder
from src.vm_manager import VMManager
from src.vm_build import VMBuilder
from src.ssh_manager import SSHManager


def main():
    """Main entry point for MerOS"""
    parser = argparse.ArgumentParser(
        description="MerOS VM and Kernel Management Tool",
        epilog='See "meros <command> --help" for more information on a specific command.'
    )

    # Add debug flag to global arguments
    parser.add_argument("--debug", action="store_true",
                      help="Show full Python traceback on errors")
    parser.add_argument("-v", "--verbose", action="store_true",
                      help="Enable verbose output")

    subparsers = parser.add_subparsers(dest="command", required=True, title="commands")

    # Register all subcommands
    register_log_command(subparsers)
    register_kernel_build_command(subparsers)
    register_init_command(subparsers)
    register_shutdown_command(subparsers)
    register_build_command(subparsers)
    register_connect_command(subparsers)
    register_push_command(subparsers)
    register_pull_command(subparsers)
    register_run_command(subparsers)
    register_info_command(subparsers)

    args = parser.parse_args()
    configure_logging(args.verbose, args.debug)  # Update this line

    try:
        handle_command(args)
    except Exception as e:
        if args.debug:
            # Print raw traceback to stderr
            traceback.print_exc(file=sys.stderr)
        else:
            logging.error(f"Operation failed: {str(e)}")
        sys.exit(1)

def register_log_command(subparsers):
    """Register log subcommand"""
    subparsers.add_parser("log", help="Display the application log")


def register_kernel_build_command(subparsers):
    """Register kernel-build subcommand"""
    subparsers.add_parser("kernel-build", help="Build the Linux kernel")


def register_init_command(subparsers):
    """Register init subcommand"""
    parser = subparsers.add_parser("init", help="Initialize VMs and network bridges")
    parser.add_argument("template", help="Name of template configuration to use")


def register_shutdown_command(subparsers):
    """Register shutdown subcommand"""
    parser = subparsers.add_parser("shutdown", help="Shutdown VMs and remove resources")
    parser.add_argument("template", help="Name of template configuration to use")

def register_build_command(subparsers):
    """Register build subcommand"""
    parser = subparsers.add_parser("build", help="Build VM images")
    parser.add_argument("template", help="Name of template configuration to use")
    parser.add_argument("vm_name", nargs='?', help="Name of VM to patch (required with --use)")

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("--rootfs-only",
                      action="store_true",
                      help="Build all images' rootfs")
    group.add_argument("--use",
                      type=Path,
                      metavar="PATCH_IMAGE",
                      help="Patch VM using existing disk image")


def register_connect_command(subparsers):
    """Register connect subcommand"""
    parser = subparsers.add_parser("connect", help="Connect to VM via SSH")
    parser.add_argument("template", help="Name of template configuration to use")
    parser.add_argument("vm_name", help="Name of VM to connect to")


def register_push_command(subparsers):
    """Register push subcommand"""
    parser = subparsers.add_parser("push", help="Push file to VM")
    parser.add_argument("template", help="Name of template configuration to use")
    parser.add_argument("vm_name", help="Name of target VM")
    parser.add_argument("local_path", type=Path, help="Path to local file")


def register_pull_command(subparsers):
    """Register pull subcommand"""
    parser = subparsers.add_parser("pull", help="Pull files from VM")
    parser.add_argument("template", help="Name of template configuration to use")
    parser.add_argument("vm_name", help="Name of target VM")


def register_run_command(subparsers):
    """Register run subcommand"""
    parser = subparsers.add_parser("run", help="Execute command on VM")
    parser.add_argument("template", help="Name of template configuration to use")
    parser.add_argument("vm_name", help="Name of target VM")
    parser.add_argument("application", type=Path, help="Path to application to execute")


def register_info_command(subparsers):
    """Register info subcommand"""
    parser = subparsers.add_parser("info", help="Show VM status information")
    parser.add_argument("template", help="Name of template configuration to use")


def configure_logging(verbose: bool, debug: bool):
    """Configure logging system"""
    level = logging.DEBUG if verbose or debug else logging.INFO
    logging.basicConfig(
        format="%(asctime)s::MerOS::%(levelname)s::%(message)s",
        datefmt="%H:%M:%S",
        level=level,
        encoding="utf-8"
    )


def handle_command(args):
    """Dispatch command to appropriate handler"""
    command_handlers = {
        "log": handle_log,
        "kernel-build": handle_kernel_build,
        "init": handle_init,
        "shutdown": handle_shutdown,
        "build": handle_build,
        "connect": handle_connect,
        "push": handle_push,
        "pull": handle_pull,
        "run": handle_run,
        "info": handle_info,
    }
    handler = command_handlers.get(args.command)
    if handler:
        handler(args)
    else:
        raise ValueError(f"Unknown command: {args.command}")


def handle_log(_):
    """Handle log command"""
    AppConfig.display_log()


def handle_kernel_build(_):
    """Handle kernel-build command"""
    KernelBuilder().build_kernel()


def handle_init(args):
    """Handle init command"""
    config = load_config(args.template)
    vm_manager = VMManager(config)

    # Configure bridges
    for bridge in config.bridges:
        with_privileges(lambda: vm_manager.configure_bridge(bridge))

    # Start VMs
    for vm_name in config.virtual_machines:
        with_privileges(lambda: vm_manager.start_vm(vm_name))


def handle_shutdown(args):
    """Handle shutdown command"""
    config = load_config(args.template)
    vm_manager = VMManager(config)

    # Stop VMs
    for vm_name in config.virtual_machines:
        with_privileges(lambda: vm_manager.stop_vm(vm_name))

    # Remove bridges
    for bridge in config.bridges:
        vm_manager.delete_bridge(bridge)


def handle_build(args):
    """Handle build command"""
    config = load_config(args.template)
    builder = VMBuilder(config, args.template)

    if args.rootfs_only:
        if args.vm_name is not None:
            raise ValueError("vm_name should not be provided with --rootfs-only")

        # Build all VMs rootfs
        for vm_name in config.virtual_machines:
            with_privileges(lambda: builder.rootfs_image_build(vm_name))
            logging.info(f"Built {vm_name} rootfs")

    elif args.use:
        if not args.vm_name:
            raise ValueError("vm_name is required when using --use")

        # Patch specific VM with provided image
        disk_image = args.use.resolve()
        if not disk_image.exists():
            raise FileNotFoundError(f"Disk image {disk_image} not found")

        with_privileges()
        builder.image_patch(args.vm_name, disk_image)
        logging.info(f"Patched {args.vm_name} with {disk_image}")


def handle_connect(args):
    """Handle connect command"""
    config = load_config(args.template)
    vm_config = get_vm_config(config, args.vm_name)
    ssh = create_ssh_manager(config, args.template, args.vm_name, vm_config)
    ssh.interactive_shell()


def handle_push(args):
    """Handle push command"""
    config = load_config(args.template)
    vm_config = get_vm_config(config, args.vm_name)
    ssh = create_ssh_manager(config, args.template, args.vm_name, vm_config)
    ssh.push_file(args.local_path.resolve())


def handle_pull(args):
    """Handle pull command"""
    config = load_config(args.template)
    vm_config = get_vm_config(config, args.vm_name)
    ssh = create_ssh_manager(config, args.template, args.vm_name, vm_config)
    ssh.pull_files()


def handle_run(args):
    """Handle run command"""
    config = load_config(args.template)
    vm_config = get_vm_config(config, args.vm_name)
    ssh = create_ssh_manager(config, args.template, args.vm_name, vm_config)
    ssh.vm_run(args.application)


## TODO Fix - Partially working
def handle_info(args):
    """Handle info command"""
    with_privileges()
    config = load_config(args.template)
    vm_manager = VMManager(config)

    for vm_name, status in vm_manager.get_all_statuses().items():
        state = "Running" if status else "Stopped"
        print(f"{args.template}_{vm_name}: {state}")


def load_config(template: str):
    """Load configuration for given template"""
    config_path = f"{AppConfig.mos_path}/templates/{template}/manifest.yml"
    return VMConfigLoader.load_config(config_path)


def get_vm_config(config, vm_name: str):
    """Get VM configuration with validation"""
    if vm_name not in config.virtual_machines:
        raise ValueError(f"VM {vm_name} not found in configuration")
    return config.virtual_machines[vm_name]


def create_ssh_manager(config, template: str, vm_name: str, vm_config):
    """Create SSH manager instance"""
    return SSHManager(
        config=config,
        template=template,
        vm_name=vm_name,
        vm_ip_addr=vm_config.networks[0].ip_addr
    )


def with_privileges(action=None):
    """Elevate privileges for sensitive operations"""
    AppConfig.elevate_privs()
    if action:
        action()


if __name__ == "__main__":
    main()
